import { useRouter } from 'next/router'
import ErrorPage from 'next/error'
import { getPostBySlug, getSlugsBySubject } from '../../lib/api'
import Head from 'next/head'
import PostBody from '../../components/post_components/PostBody'
//import { CMS_NAME } from '../../lib/constants'
import { Box, CssBaseline, Typography } from '@mui/joy';
import { MDXRemote } from 'next-mdx-remote'
import Appbar from '../../components/Appbar'
import Sidebar from '../../components/Sidebar'
import PostTitle from '@/components/post_components/PostTitle'

const components = {
  p: PostBody,
}

export default function Post({source, frontMatter}) {
  const router = useRouter()
  //const title = `${frontMatter.title} | Next.js Blog Example with ${CMS_NAME}`
  if (!router.isFallback && !frontMatter?.slug) {
    return <ErrorPage statusCode={404} />
  }
  return (
    <Box sx={{ display: 'flex', height: '100dvh'}}>
    <Head>
      <title>Create Next App</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="initial-scale=1, width=device-width" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <CssBaseline />
    <Appbar />
    <Sidebar />
      {router.isFallback ? (
        <Typography>Loading...</Typography>
      ) : (
        <Box
        component='main'
        sx={(theme) => ({
          px: {
            xs: 2,
            md: 6,
          },
          py: { xs: `calc(${theme.spacing(0)} + var(--Header-height))` },
          flex: 1,
          display: 'flex',
          flexDirection: 'column',
          minWidth: 0,
          height: '100dvh',
          gap: 1,
        })
        }
      >
        <PostTitle text={frontMatter.title} />
        <MDXRemote {...source} components={components} />
        </Box>
      )}
    </Box>
  )
}

type Params = {
  params: {
    slug: string
  }
}

export async function getStaticProps({ params }: Params) {
  const post = await getPostBySlug(`projects/${params.slug}`, [
    'title',
    'date',
    'slug',
    'author',
    'content',
    'ogImage',
    'coverImage',
  ])
  
  return {
    props: {
      source: post.source,
      frontMatter: post.frontMatter,
    },
  }
}

export async function getStaticPaths() {
  const slugs = getSlugsBySubject('projects');
  return {
    paths: slugs.map(slugName => {
      return {
        params: {
          slug: slugName
        },
      }
    }),
    fallback: false,
  }
}